#! /usr/bin/env ruby

require 'pp'
require 'optparse'

def parse_mol2(filename, names, numbers)
  begin
    file = File.new(filename)
  rescue
    raise IOError, "could not open file #{filename}!"
  end

  # skip first entry (commentary or nothing)
  file.readline("@<TRIPOS>MOLECULE\n")

  file.each("@<TRIPOS>MOLECULE\n").each_with_index do |entr,i|
    foundname = nil
    foundnumber = nil
    entr = entr.split /\n/
    nameline = entr[0]
    names.each do |regex|
      if nameline.match regex
        foundname = regex
      end
    end

    # delete found name
    names.select {|name| name != foundname}

    numbers.each do |num|
      if num == i
        foundnumber = num
      end
    end
  
    # delete found number (even if foundname)
    numbers.select {|number| number != foundnumber}

    if foundnumber or foundname
      puts "@<TRIPOS>MOLECULE"
      entr.each do |line|
        if not line.match /^#/ and not line.match /^@<TRIPOS>MOLECULE/
          puts line
        end
      end
    end
   
  end

  file.close
end

def parse_options(args)
  options = Hash.new
  options[:inputfile] = false
  options[:names] = []
  options[:numbers] = []

  option_parser = OptionParser.new do |opts|
    opts.on("--inputfile <file>", 
            "Filename of mol2 file to parse") do |filename|
      if options[:inputfile]
        raise RuntimeError, "option --inputfile specified more than once!"
      end
      options[:inputfile] = filename
    end
    
    opts.on("--name <name>", Regexp,
            "specify molecular name") do |name|
      options[:names].push(name)
    end

    opts.on("--number <number>", Integer,
            "specify position in mol2 file") do |number|
      options[:numbers].push(number)
    end
  end

  option_parser.parse! args

  options[:numbers].sort

  if not options[:inputfile]
    raise RuntimeError, "--inputfile is mandatory!"
  end

  return options
end

opts = parse_options(ARGV)
parse_mol2(opts[:inputfile], opts[:names], opts[:numbers])
#pp opts
